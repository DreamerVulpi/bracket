name: workflow
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: '1.25'
      - name: Build project
        run: go build
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: '1.25'
      - name: Install linter
        run: go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.5.0
      - name: Launch linter
        run: golangci-lint run
  database:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        options: >- 
          --health-cmd "pg_isready" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: '1.25'
      - name: Set DB_DSN Environment Variable
        run: echo "DB_DSN=user=runner password=password host=postgres port=5432 dbname=testdb sslmode=disable" >> $GITHUB_ENV
      - name: Install goose
        run: go install github.com/pressly/goose/v3/cmd/goose@latest
      - name: Launch goose (Run migrations)
        env:
          GOOSE_DRIVER: postgres
          GOOSE_DBSTRING: ${{ env.DB_DSN }}
          GOOSE_MIGRATION_DIR: ./migrations
        run: goose up
      - name: Test launch postgres
        run: go test ./tests -run ^TestPostgresContainer$
        env:
          DB_DSN: ${{ env.DB_DSN }}
      - name: Test CRUD methods of entity User
        run: go test ./tests -run ^TestMethodsUser$
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: actions/setup-go@v6
  #       with:
  #         go-version: '1.25'
  #     - name: Launch tests
  #       run: go test ./...